name: CI

on:
  workflow_dispatch:
  schedule:
    - cron: "35 4 */6 * *" # Every 6 days.
  pull_request:
  push:

jobs:
  build-iqtree:
    name: Fetch or Build IQ-TREE 2 Static Library on ${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest] # Intel linux, Intel Mac, ARM Mac, Windows

    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Get IQ-TREE 2 SHA
        shell: bash
        run: |
          cd iqtree2
          IQ_TREE_2_SHA=$(git rev-parse HEAD)
          echo "IQ_TREE_2_SHA=${IQ_TREE_2_SHA}" >> $GITHUB_ENV

      - uses: actions/cache@v4
        id: cache
        with:
          key: libiqtree-${{ matrix.os }}-${{ env.IQ_TREE_2_SHA }}
          path: src/piqtree2/_libiqtree/libiqtree2.a
          lookup-only: true
      
      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        if: steps.cache.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
        with:
          boost_version: 1.84.0
          platform_version: 2022
          toolset: mingw

      # - name: Install vcpkg
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     git clone https://github.com/microsoft/vcpkg.git
      #     cd vcpkg
      #     git checkout master
      #     ./bootstrap-vcpkg.bat
      
      # - name: Install zlib with vcpkg
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     vcpkg/vcpkg install zlib:x64-windows-static

      - name: Build IQ-TREE
        shell: bash
        if: steps.cache.outputs.cache-hit != 'true'
        # export VCPKG_ROOT=$(cygpath -w "$(pwd)/vcpkg")
        # export ZLIB_ROOT=$VCPKG_ROOT\\installed\\x64-windows-static
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo ./build_tools/before_all_linux.sh
          elif [[ "${{ matrix.os }}" == "macos-13" || "${{ matrix.os }}" == "macos-14" ]]; then
            ./build_tools/before_all_mac.sh
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export BOOST_ROOT="${{ steps.install-boost.outputs.BOOST_ROOT }}"
            
            ./build_tools/before_all_windows.sh
          fi

      # - uses: actions/upload-artifact@v4
      #   if: matrix.os == 'windows-latest'
      #   with:
      #     name: Windows IQ-TREE Library
      #     path: src/piqtree2/_libiqtree/libiqtree2.a
  

  tests:
    name: Run Tests with Python ${{matrix.python-version}} on ${{matrix.os}}
    needs: build-iqtree
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest] # Intel linux, Intel Mac, ARM Mac, Intel Windows
        python-version: ["3.10"] 
    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: "actions/setup-python@v5"
        with:
            python-version: "${{ matrix.python-version }}"
      
      - uses: actions/cache/restore@v4
        with:
          key: libiqtree-${{ matrix.os }}-${{ env.IQ_TREE_2_SHA }}
          path: src/piqtree2/_libiqtree/libiqtree2.a
          fail-on-cache-miss: true

      # - name: Install vcpkg
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     git clone https://github.com/microsoft/vcpkg.git
      #     cd vcpkg
      #     git checkout master
      #     ./bootstrap-vcpkg.bat
      
      # - name: Install zlib with vcpkg
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     vcpkg/vcpkg install zlib:x64-windows-static

      # if [[ "$RUNNER_OS" == "Windows" ]]; then
      #   mv src/piqtree2/_libiqtree/libiqtree2.a src/piqtree2/_libiqtree/iqtree2.lib
      # fi
      - name: Extract archive
        run: |
          cd src/piqtree2/_libiqtree
          python extract.py

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: Library files
          path: src/piqtree2/_libiqtree
          
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Run Nox Testing
        run: |
          pip install nox
          nox -s test-${{ matrix.python-version }} -- --cov --cov-report=lcov:${{matrix.os}}-${{matrix.python-version}}.lcov --cov-report=term --cov-append --durations=20
        
      - name: Coveralls Parallel
        if: matrix.os != 'macos-13'
        uses: coverallsapp/github-action@v2
        with:
          parallel: true
          github-token: ${{secrets.github_token}}
          flag-name: run-${{matrix.python-version}}-${{matrix.os}}
          file: "${{matrix.os}}-${{matrix.python-version}}.lcov"

  finish:
    name: "Finish Coveralls"
    needs: tests
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true